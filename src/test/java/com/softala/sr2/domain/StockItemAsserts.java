package com.softala.sr2.domain;

import static com.softala.sr2.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class StockItemAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockItemAllPropertiesEquals(StockItem expected, StockItem actual) {
        assertStockItemAutoGeneratedPropertiesEquals(expected, actual);
        assertStockItemAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockItemAllUpdatablePropertiesEquals(StockItem expected, StockItem actual) {
        assertStockItemUpdatableFieldsEquals(expected, actual);
        assertStockItemUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockItemAutoGeneratedPropertiesEquals(StockItem expected, StockItem actual) {
        assertThat(expected)
            .as("Verify StockItem auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockItemUpdatableFieldsEquals(StockItem expected, StockItem actual) {
        assertThat(expected)
            .as("Verify StockItem relevant properties")
            .satisfies(e -> assertThat(e.getQuantity()).as("check quantity").isEqualTo(actual.getQuantity()))
            .satisfies(e -> assertThat(e.getAvailable()).as("check available").isEqualTo(actual.getAvailable()))
            .satisfies(e -> assertThat(e.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getPrice()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockItemUpdatableRelationshipsEquals(StockItem expected, StockItem actual) {
        assertThat(expected)
            .as("Verify StockItem relationships")
            .satisfies(e -> assertThat(e.getStock()).as("check stock").isEqualTo(actual.getStock()))
            .satisfies(e -> assertThat(e.getStockItemType()).as("check stockItemType").isEqualTo(actual.getStockItemType()));
    }
}
